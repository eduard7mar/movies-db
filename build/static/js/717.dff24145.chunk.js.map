{"version":3,"file":"static/js/717.dff24145.chunk.js","mappings":"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","sources":["features/Movies/MoviesFilter.tsx","features/Movies/MovieCard.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.ts"],"sourcesContent":["import {\r\n  Autocomplete,\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Paper,\r\n  Skeleton,\r\n  TextField,\r\n  debounce,\r\n} from \"@mui/material\";\r\nimport FilterAltOutlinedIcon from \"@mui/icons-material/FilterAltOutlined\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { KeywordItem, useGetGenresQuery, useGetKeywordsQuery } from \"../../services/tmdb\";\r\n\r\nexport interface Filters {\r\n  keywords: KeywordItem[];\r\n  genres: number[];\r\n}\r\n\r\ninterface MoviesFilterProps {\r\n  onApply(filters: Filters): void;\r\n}\r\n\r\nexport function MoviesFilter({ onApply }: MoviesFilterProps) {\r\n  const { control, handleSubmit, formState } = useForm<Filters>({\r\n    defaultValues: {\r\n      keywords: [],\r\n      genres: [],\r\n    },\r\n  });\r\n\r\n  const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\");\r\n  const { data: keywordsOptions = [], isLoading: keywordsLoading } = useGetKeywordsQuery(keywordsQuery, { skip: !keywordsQuery });\r\n  const { data: genres, isLoading: genresLoading } = useGetGenresQuery();\r\n\r\n  const debouncedFetchKeywordsOptions = useMemo(\r\n    () =>\r\n      debounce((query: string) => {\r\n        setKeywordsQuery(query);\r\n      }, 1000),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ m: 2, p: 0.5, maxWidth: 350 }}>\r\n      <form onSubmit={handleSubmit(onApply)}>\r\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\r\n          <Controller\r\n            name=\"keywords\"\r\n            control={control}\r\n            render={({ field: { onChange, value } }) => (\r\n              <Autocomplete\r\n                multiple\r\n                loading={keywordsLoading}\r\n                disablePortal\r\n                options={keywordsOptions}\r\n                filterOptions={(x) => x}\r\n                getOptionLabel={(option) => option.name}\r\n                onChange={(_, value) => onChange(value)}\r\n                value={value}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                onInputChange={(_, value) => debouncedFetchKeywordsOptions(value)}\r\n                renderInput={(params) => <TextField {...params} label=\"Keywords\" />}\r\n              />\r\n            )}\r\n          />\r\n        </FormControl>\r\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\r\n          {genresLoading ? (\r\n            <Skeleton width={300} height={480} />\r\n          ) : (\r\n            <>\r\n              <FormLabel component=\"legend\">Genres</FormLabel>\r\n              <FormGroup sx={{ maxHeight: 500 }}>\r\n                <Controller\r\n                  name=\"genres\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <>\r\n                      {genres?.map((genre) => (\r\n                        <FormControlLabel\r\n                          key={genre.id}\r\n                          control={\r\n                            <Checkbox\r\n                              value={genre.id}\r\n                              checked={field.value.includes(genre.id)}\r\n                              onChange={(event, checked) => {\r\n                                const valueNumber = Number(event.target.value);\r\n                                if (checked) {\r\n                                  field.onChange([...field.value, valueNumber]);\r\n                                } else {\r\n                                  field.onChange(field.value.filter((value) => value !== valueNumber));\r\n                                }\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={genre.name}\r\n                        />\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                />\r\n              </FormGroup>\r\n            </>\r\n          )}\r\n        </FormControl>\r\n        <Button type=\"submit\" sx={{ m: 2 }} variant=\"contained\" startIcon={<FilterAltOutlinedIcon />}>\r\n          Apply filter\r\n        </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { Button, Card, CardActions, CardContent, CardMedia, IconButton, Tooltip, Typography } from \"@mui/material\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { memo } from \"react\";\r\n\r\ninterface MovieCardProps {\r\n  id: number;\r\n  title: string;\r\n  popularity: number;\r\n  overview: string;\r\n  image?: string;\r\n  enableUserActions?: boolean;\r\n  onAddToFavorite?(id: number): void;\r\n}\r\n\r\nfunction MovieCard({\r\n  id,\r\n  title,\r\n  overview,\r\n  popularity,\r\n  onAddToFavorite,\r\n  image = \"/movie-thumb.png\",\r\n  enableUserActions = false,\r\n}: MovieCardProps) {\r\n  console.count(\"MovieCard\");\r\n\r\n  return (\r\n    <Card sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardMedia component=\"div\" sx={{ pt: \"56.25%\" }} image={image} />\r\n      <CardContent sx={{ flexGrow: 1 }}>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {overview}\r\n        </Typography>\r\n        <Typography variant=\"button\" display=\"block\" mt={2}>\r\n          {popularity}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button component={RouterLink} to={`/movies/${id}`} color=\"secondary\">\r\n          Details\r\n        </Button>\r\n        {enableUserActions && (\r\n          <Tooltip title=\"Add to favorites\">\r\n            <IconButton onClick={() => onAddToFavorite?.(id)}>\r\n              <FavoriteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default memo(MovieCard);\r\n","import { useCallback, useState } from \"react\";\r\nimport { Container, Grid, LinearProgress, Typography } from \"@mui/material\";\r\nimport { useIntersectionObserver } from \"../../hooks/useIntersectionObserver\";\r\nimport { MoviesFilter } from \"./MoviesFilter\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport { useGetMoviesQuery, useGetConfigurationQuery, MoviesQuery } from \"../../services/tmdb\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst initialQuery = {\r\n  page: 1,\r\n  filters: {},\r\n};\r\n\r\nfunction Movies() {\r\n  const { isAuthenticated, user } = useAuth0();\r\n  const [query, setQuery] = useState<MoviesQuery>(initialQuery);\r\n\r\n  const { data: configuration } = useGetConfigurationQuery();\r\n  const { data, isFetching } = useGetMoviesQuery(query);\r\n  const movies = data?.results;\r\n  const hasMorePages = data?.hasMorePages;\r\n\r\n  function formatImageUrl(imagePath?: string | null) {\r\n    return imagePath && configuration ? `${configuration.images.base_url}w780${imagePath}` : undefined;\r\n  }\r\n\r\n  const onIntersect = useCallback(() => {\r\n    if (hasMorePages) {\r\n      setQuery((q) => ({ ...q, page: q.page + 1 }));\r\n    }\r\n  }, [hasMorePages]);\r\n\r\n  const [targetRef] = useIntersectionObserver({ onIntersect });\r\n\r\n  const handleAddToFavorites = useCallback(\r\n    (id: number): void => alert(`Not implemented! Action: ${user?.name} is adding movie ${id} to favorites.`),\r\n    [user?.name]\r\n  );\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ flexWrap: \"nowrap\" }}>\r\n      <Grid item xs=\"auto\">\r\n        <MoviesFilter\r\n          onApply={(filters) => {\r\n            const moviesFilters = {\r\n              keywords: filters?.keywords.map((k) => k.id),\r\n              genres: filters?.genres,\r\n            };\r\n\r\n            setQuery({\r\n              page: 1,\r\n              filters: moviesFilters,\r\n            });\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Container sx={{ py: 8 }} maxWidth=\"lg\">\r\n          {!isFetching && !movies?.length && <Typography variant=\"h6\">No movies were found that match your query.</Typography>}\r\n          <Grid container spacing={4}>\r\n            {movies?.map((m, i) => (\r\n              <Grid item key={m.id} xs={12} sm={6} md={4}>\r\n                <MovieCard\r\n                  key={m.id}\r\n                  id={m.id}\r\n                  title={m.title}\r\n                  overview={m.overview}\r\n                  popularity={m.popularity}\r\n                  image={formatImageUrl(m.backdrop_path)}\r\n                  enableUserActions={isAuthenticated}\r\n                  onAddToFavorite={handleAddToFavorites}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <div ref={targetRef}>{isFetching && <LinearProgress color=\"secondary\" sx={{ mt: 3 }} />}</div>\r\n        </Container>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Movies;\r\n","import { useRef, useState, useEffect, MutableRefObject } from \"react\";\r\n\r\ninterface Options {\r\n  root?: Element;\r\n  rootMargin?: string;\r\n  threshold?: number;\r\n  onIntersect?(): void;\r\n}\r\n\r\ntype HookReturnType = [MutableRefObject<null>, IntersectionObserverEntry?];\r\n\r\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\r\n  const { threshold = 1.0, root = null, rootMargin = \"0px\", onIntersect } = options;\r\n\r\n  const targetRef = useRef(null);\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries: IntersectionObserverEntry[]) => {\r\n        const [entry] = entries;\r\n        if (entry.isIntersecting) {\r\n          onIntersect?.();\r\n        }\r\n        setEntry(entry);\r\n      },\r\n      { threshold, root, rootMargin }\r\n    );\r\n    const currentRef = targetRef.current;\r\n\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return function () {\r\n      if (currentRef) {\r\n        observer.disconnect();\r\n      }\r\n    };\r\n  }, [onIntersect, root, rootMargin, threshold]);\r\n\r\n  return [targetRef, entry];\r\n}\r\n"],"names":["MoviesFilter","_ref","onApply","control","handleSubmit","formState","useForm","defaultValues","keywords","genres","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeywordsQuery","skip","genresLoading","useGetGenresQuery","debouncedFetchKeywordsOptions","useMemo","debounce","query","_jsx","Paper","sx","m","p","maxWidth","children","_jsxs","onSubmit","FormControl","display","component","variant","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","loading","disablePortal","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","id","onInputChange","renderInput","params","TextField","label","Skeleton","width","height","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","Button","type","startIcon","FilterAltOutlinedIcon","MovieCard","title","overview","popularity","onAddToFavorite","image","enableUserActions","console","count","Card","flexDirection","CardMedia","pt","CardContent","flexGrow","Typography","gutterBottom","color","mt","CardActions","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","initialQuery","page","filters","isAuthenticated","user","useAuth0","setQuery","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePages","onIntersect","useCallback","q","targetRef","arguments","length","undefined","threshold","root","rootMargin","useRef","entry","setEntry","useEffect","observer","IntersectionObserver","entries","isIntersecting","currentRef","current","observe","disconnect","useIntersectionObserver","handleAddToFavorites","alert","Grid","container","spacing","flexWrap","item","xs","moviesFilters","k","Container","py","i","sm","md","imagePath","backdrop_path","images","base_url","ref","LinearProgress"],"sourceRoot":""}